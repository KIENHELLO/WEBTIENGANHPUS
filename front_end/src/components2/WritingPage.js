import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './WritingPage.css';

const WritingPage = () => {
    const writingPrompts = [
        "Describe your favorite holiday destination and why you love it",
        "Discuss the advantages and disadvantages of social media",
        "Write about a person who has influenced you the most",
        "Should school uniforms be mandatory? Give your opinion",
        "Describe how technology has changed our lives in the past decade"
    ];

    const [currentPrompt, setCurrentPrompt] = useState('');
    const [userWriting, setUserWriting] = useState('');
    const [feedback, setFeedback] = useState(null);
    const [isLoading, setIsLoading] = useState(false);

    // H√†m ph√¢n t√≠ch c√¢u
    const analyzeSentenceStructure = (text) => {
        const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
        let structureFeedback = [];
        let score = 0;

        sentences.forEach((sentence, index) => {
            const words = sentence.trim().split(/\s+/);
            const wordCount = words.length;

            // Ki·ªÉm tra c√¢u qu√° ng·∫Øn/d√†i
            if (wordCount < 5) {
                structureFeedback.push(`C√¢u #${index + 1}: Qu√° ng·∫Øn (${wordCount} t·ª´)`);
                score -= 2;
            } else if (wordCount > 25) {
                structureFeedback.push(`C√¢u #${index + 1}: Qu√° d√†i (${wordCount} t·ª´)`);
                score -= 2;
            } else {
                score += 3;
            }

            // Ki·ªÉm tra ch·ªØ c√°i ƒë·∫ßu c√¢u vi·∫øt hoa
            if (words[0] && words[0][0] !== words[0][0].toUpperCase()) {
                structureFeedback.push(`C√¢u #${index + 1}: Thi·∫øu vi·∫øt hoa ƒë·∫ßu c√¢u`);
                score -= 1;
            }
        });

        return { feedback: structureFeedback, score: Math.max(0, score) };
    };

    // H√†m ki·ªÉm tra ng·ªØ ph√°p c∆° b·∫£n
    const checkGrammar = (text) => {
        const commonMistakes = {
            ' i ': ' I ',
            ' dont ': ' don\'t ',
            ' cant ': ' can\'t ',
            ' its ': ' it\'s ',
        };

        let grammarFeedback = [];
        let score = 10; // ƒêi·ªÉm c∆° b·∫£n

        // Ki·ªÉm tra l·ªói ph·ªï bi·∫øn
        Object.entries(commonMistakes).forEach(([wrong, correct]) => {
            if (text.toLowerCase().includes(wrong)) {
                grammarFeedback.push(`Ph√°t hi·ªán l·ªói: "${wrong.trim()}" ‚Üí "${correct.trim()}"`);
                score -= 1;
            }
        });

        // Ki·ªÉm tra a/an
        const aAnErrors = text.match(/\b(a|an)\s+[aeiouAEIOU]/g);
        if (aAnErrors) {
            grammarFeedback.push(`L·ªói d√πng m·∫°o t·ª´: ${aAnErrors.join(', ')}`);
            score -= 1;
        }

        return { feedback: grammarFeedback, score: Math.max(0, score) };
    };

    // H√†m ƒë√°nh gi√° t·ªïng th·ªÉ
    const evaluateWriting = () => {
        setIsLoading(true);

        setTimeout(() => {
            const wordCount = userWriting.trim().split(/\s+/).length;

            // Ph√¢n t√≠ch c·∫•u tr√∫c
            const structureAnalysis = analyzeSentenceStructure(userWriting);

            // Ki·ªÉm tra ng·ªØ ph√°p
            const grammarAnalysis = checkGrammar(userWriting);

            // T√≠nh ƒëi·ªÉm t·ªïng (t·ªëi ƒëa 100)
            const structureScore = Math.min(30, structureAnalysis.score * 3);
            const grammarScore = Math.min(40, grammarAnalysis.score * 4);
            const lengthScore = Math.min(30, Math.floor(wordCount / 5)); // 1 ƒëi·ªÉm m·ªói 5 t·ª´

            const totalScore = structureScore + grammarScore + lengthScore;

            // T·∫°o ph·∫£n h·ªìi
            setFeedback({
                score: totalScore,
                wordCount,
                grammar: grammarAnalysis.feedback.length > 0
                    ? grammarAnalysis.feedback
                    : ['Kh√¥ng ph√°t hi·ªán l·ªói ng·ªØ ph√°p nghi√™m tr·ªçng'],
                structure: structureAnalysis.feedback.length > 0
                    ? structureAnalysis.feedback
                    : ['C·∫•u tr√∫c c√¢u h·ª£p l√Ω'],
                suggestions: [
                    wordCount < 50 ? 'B√†i vi·∫øt kh√° ng·∫Øn, c·∫ßn ph√°t tri·ªÉn th√™m √Ω' : '',
                    'N√™n s·ª≠ d·ª•ng ƒëa d·∫°ng c·∫•u tr√∫c c√¢u ph·ª©c/tgh·ª©c h·ª£p',
                    'Ki·ªÉm tra l·∫°i c√°c d·∫•u c√¢u'
                ].filter(s => s)
            });

            setIsLoading(false);
        }, 1500);
    };

    const getRandomPrompt = () => {
        const randomIndex = Math.floor(Math.random() * writingPrompts.length);
        setCurrentPrompt(writingPrompts[randomIndex]);
        setUserWriting('');
        setFeedback(null);
    };

    return (
        <div className="writing-page">
            <div className="writing-header">
                <h2>Writing Practice</h2>
                <Link to="/dashboard" className="MainPage">‚Üê Back to Home</Link>
            </div>

            <div className="writing-container">
                <div className="prompt-section">
                    <h3>ƒê·ªÅ b√†i:</h3>
                    <div className="prompt-box">
                        {currentPrompt || "Nh·∫•n n√∫t ƒë·ªÉ nh·∫≠n ƒë·ªÅ b√†i ng·∫´u nhi√™n"}
                    </div>
                    <button
                        onClick={getRandomPrompt}
                        className="prompt-button"
                    >
                        L·∫•y ƒë·ªÅ ng·∫´u nhi√™n
                    </button>
                </div>

                <div className="writing-area">
                    <h3>B√†i vi·∫øt c·ªßa b·∫°n:</h3>
                    <textarea
                        value={userWriting}
                        onChange={(e) => setUserWriting(e.target.value)}
                        placeholder="Vi·∫øt b√†i c·ªßa b·∫°n ·ªü ƒë√¢y..."
                        disabled={!currentPrompt}
                    />
                    <div className="action-buttons">
                        <button
                            onClick={evaluateWriting}
                            disabled={!userWriting || isLoading}
                            className="evaluate-button"
                        >
                            {isLoading ? 'ƒêang ch·∫•m...' : 'Ch·∫•m b√†i'}
                        </button>
                        <span className="word-count">
                            S·ªë t·ª´: {userWriting ? userWriting.trim().split(/\s+/).length : 0}
                        </span>
                    </div>

                    {feedback && (
                        <div className="feedback-section">
                            <h3>Ph√¢n t√≠ch chi ti·∫øt:</h3>
                            <div className="score-box">
                                ƒêi·ªÉm: <span>{feedback.score}/100</span> ‚Ä¢ S·ªë t·ª´: {feedback.wordCount}
                            </div>

                            <div className="feedback-grid">
                                <div className="feedback-card">
                                    <h4>üìù Ng·ªØ ph√°p</h4>
                                    <ul>
                                        {feedback.grammar.map((item, i) => (
                                            <li key={`grammar-${i}`}>{item}</li>
                                        ))}
                                    </ul>
                                </div>

                                <div className="feedback-card">
                                    <h4>üß© C·∫•u tr√∫c</h4>
                                    <ul>
                                        {feedback.structure.map((item, i) => (
                                            <li key={`structure-${i}`}>{item}</li>
                                        ))}
                                    </ul>
                                </div>

                                <div className="feedback-card">
                                    <h4>üí° G·ª£i √Ω</h4>
                                    <ul>
                                        {feedback.suggestions.map((item, i) => (
                                            <li key={`suggestion-${i}`}>{item}</li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default WritingPage;